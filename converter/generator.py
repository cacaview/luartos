import re

class LuaGenerator:
    """
    Generates Lua code from an intermediate representation of UI elements.
    """
    def __init__(self, ui_elements):
        self.ui_elements = ui_elements
        self.lua_code = ""
        self.widget_map = {element['name']: self._get_lua_name(element['name']) for element in ui_elements}

    def _get_lua_name(self, c_name):
        """Converts a C-style name like 'screen_btn_1' to a Lua table access 'ui.screen.btn_1'."""
        # Match "screen_1_cont_1" -> base="screen_1", rest="cont_1"
        # Match "screen_btn_1" -> base="screen", rest="btn_1"
        match = re.match(r"^(screen(?:_\d+)?)_(.*)", c_name)
        if match:
            base, rest = match.groups()
            if rest:
                return f"ui.{base}.{rest}"
        # For names like "screen", "screen_1", "screen_2"
        return f"ui.{c_name}"

    def _convert_value(self, c_value):
        """
        Converts a C value string to its Lua equivalent.
        """
        if "LV_SYMBOL_" in c_value:
            # A simple approach to merge C string literals with symbols into one string
            processed_value = c_value.replace('" "', '') # remove space between literals
            processed_value = re.sub(r'LV_SYMBOL_(\w+)', r'SYMBOL_\1', processed_value)
            return processed_value

        # lv_color_hex(0x2195f6) -> 0x2195f6
        color_match = re.match(r"lv_color_hex\((0x[0-9a-fA-F]+)\)", c_value)
        if color_match:
            return color_match.group(1)

        # &lv_font_... -> lvgl.font_...()
        font_match = re.match(r"&lv_font_(\w+)", c_value)
        if font_match:
            return f"lvgl.font_{font_match.group(1)}()"

        # LV_... -> lvgl....()
        if c_value.startswith("LV_"):
            return f"lvgl.{c_value}()"
            
        # ui->widget -> ui.widget
        if c_value.startswith("ui->"):
            c_name = c_value.replace('ui->', '')
            return self.widget_map.get(c_name, c_name)

        # NULL -> lvgl.scr_act() or nil
        if c_value == "NULL":
            return "lvgl.scr_act()"

        return c_value

    def generate(self):
        """
        Main generation function.
        Iterates through the UI elements and builds the Lua code string.
        """
        print("Generating Lua code with fixes...")

        self.lua_code = "-- Auto-generated by C-to-Lua converter\n"
        self.lua_code += "local ui = {}\n\n"
        self.lua_code += "function create_ui(screen)\n"

        for element in self.ui_elements:
            name = element['name']
            lua_name = self.widget_map[name]
            
            self.lua_code += f"\n  -- Code for {name}\n"
            
            # Creation
            parent_c = element['parent']
            parent_lua = self.widget_map.get(parent_c, self._convert_value(parent_c))
            self.lua_code += f"  {lua_name} = lvgl.{element['type']}_create({parent_lua})\n"

            # Properties
            for prop in element['properties']:
                prop_name = prop['property']
                # Skip style properties that are handled by the style block
                if prop_name.startswith("style_"):
                    continue
                
                params = [self._convert_value(p) for p in prop['params']]
                params_str = ", ".join(params)
                self.lua_code += f"  lvgl.obj_set_{prop_name}({lua_name}, {params_str})\n"

            # Styles
            for selector, styles in element['styles'].items():
                lua_selector = self._convert_value(selector)
                for style in styles:
                    style_prop = style['property']
                    style_val = self._convert_value(style['value'])
                    self.lua_code += f"  lvgl.obj_set_style_{style_prop}({lua_name}, {style_val}, {lua_selector})\n"

        self.lua_code += "\nend\n\n"
        self.lua_code += "return ui\n"

        return self.lua_code