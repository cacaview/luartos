import os
import re
import argparse

def get_screen_name_from_filename(filename):
    """Extracts screen name like 'screen_1' from filename 'setup_scr_screen_1.lua'."""
    # Extracts 'screen_1' from 'setup_scr_screen_1.lua'
    match = re.search(r'setup_scr_(screen(?:_\d+)?)\.lua', filename)
    if match:
        base_name = match.group(1)
        if base_name == 'screen':
            return 'screen_0'
        return base_name
    return None

def merge_lua_files(input_dir, output_file):
    """
    Merges multiple Lua files from an input directory into a single file,
    wrapping each in a function and adding a main creation function.
    """
    # Find all .lua files in the temp directory
    try:
        lua_files = sorted([f for f in os.listdir(input_dir) if f.endswith('.lua')])
    except FileNotFoundError:
        print(f"Error: Input directory not found at {input_dir}")
        return

    if not lua_files:
        print(f"No .lua files found in {input_dir} to merge.")
        return

    all_content = []
    function_definitions = []
    function_calls = []

    # Header
    all_content.append("-- This file is auto-generated by the converter tool.")
    all_content.append("-- Do not edit this file manually.")
    all_content.append("local ui = require('ui_common')")
    all_content.append("\n")

    for lua_file in lua_files:
        screen_name = get_screen_name_from_filename(lua_file)
        if not screen_name:
            print(f"Warning: Could not determine screen name from '{lua_file}'. Skipping.")
            continue

        # e.g., screen_0 -> ui.create_screen_0
        func_name = f"ui.create_{screen_name}"
        
        function_calls.append(f"    {func_name}()")

        filepath = os.path.join(input_dir, lua_file)
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
        except Exception as e:
            print(f"Error reading file {filepath}: {e}")
            continue

        # Build the function definition string
        function_body = "    " + content.replace('\n', '\n    ').rstrip()
        function_def = f"function {func_name}()\n{function_body}\nend"
        function_definitions.append(function_def)

    # Combine all parts
    all_content.extend(function_definitions)
    all_content.append("\n")
    
    # Add the main creation function
    all_content.append("function ui.create_all_screens()")
    all_content.extend(function_calls)
    all_content.append("end\n")
    
    all_content.append("return ui")

    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("\n".join(all_content))
        print(f"Successfully merged {len(lua_files)} files into {output_file}")
    except IOError as e:
        print(f"Error writing to output file {output_file}: {e}")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Merge multiple Lua UI files into a single file.")
    parser.add_argument("input_dir", help="Directory containing the Lua files to merge.")
    parser.add_argument("output_file", help="Path to the output merged Lua file.")
    args = parser.parse_args()

    merge_lua_files(args.input_dir, args.output_file)