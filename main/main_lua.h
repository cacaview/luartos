#ifndef MAIN_LUA_H
#define MAIN_LUA_H

// Embedded Lua script for LVGL demo with PSRAM support
static const char* main_lua_script = 
"print('Starting Lua LVGL demo with PSRAM support...')\n"
"\n"
"-- Test PSRAM by creating some large tables\n"
"print('Creating test data structures to use PSRAM...')\n"
"local test_data = {}\n"
"for i = 1, 100 do\n"
"    test_data[i] = string.rep('PSRAM test data ', 50) -- Create some large strings\n"
"end\n"
"print('Test data structures created')\n"
"\n"
"-- Get current screen\n"
"local scr = lvgl.scr_act()\n"
"\n"
"-- Clear screen first\n"
"lvgl.obj_clean(scr)\n"
"\n"
"-- Set background color to dark blue\n"
"lvgl.obj_set_style_bg_color(scr, 0x003a57, lvgl.PART_MAIN())\n"
"print('Set background color to dark blue')\n"
"\n"
"-- Force refresh screen\n"
"lvgl.obj_invalidate(scr)\n"
"lvgl.refr_now()\n"
"print('Force refresh screen')\n"
"\n"
"-- Create title label\n"
"print('Creating title label...')\n"
"local title = lvgl.label_create(scr)\n"
"if title then\n"
"    lvgl.label_set_text(title, 'ESP32-S3 + Lua + LVGL + PSRAM')\n"
"    lvgl.obj_set_style_text_color(title, lvgl.color_white(), lvgl.PART_MAIN())\n"
"    lvgl.obj_set_style_text_font(title, lvgl.font_montserrat_14(), lvgl.PART_MAIN())\n"
"    lvgl.obj_align(title, lvgl.ALIGN_TOP_MID(), 0, 10)\n"
"    print('Title label created successfully')\n"
"else\n"
"    print('ERROR: Title label creation failed')\n"
"end\n"
"\n"
"-- Create main button\n"
"print('Creating main button...')\n"
"local btn = lvgl.btn_create(scr)\n"
"if btn then\n"
"    lvgl.obj_set_size(btn, 180, 60)\n"
"    lvgl.obj_align(btn, lvgl.ALIGN_CENTER(), 0, -50)\n"
"    \n"
"    local btn_label = lvgl.label_create(btn)\n"
"    if btn_label then\n"
"        lvgl.label_set_text(btn_label, 'PSRAM Enabled!')\n"
"        lvgl.obj_center(btn_label)\n"
"        print('Main button created successfully')\n"
"    else\n"
"        print('ERROR: Button label creation failed')\n"
"    end\n"
"else\n"
"    print('ERROR: Button creation failed')\n"
"end\n"
"\n"
"-- Create slider\n"
"print('Creating slider...')\n"
"local slider = lvgl.slider_create(scr)\n"
"if slider then\n"
"    lvgl.obj_set_size(slider, 250, 20)\n"
"    lvgl.obj_align(slider, lvgl.ALIGN_CENTER(), 0, 20)\n"
"    lvgl.slider_set_value(slider, 75, lvgl.ANIM_OFF())\n"
"    \n"
"    local slider_label = lvgl.label_create(scr)\n"
"    if slider_label then\n"
"        lvgl.label_set_text(slider_label, 'Memory Usage: 75%')\n"
"        lvgl.obj_align_to(slider_label, slider, lvgl.ALIGN_OUT_TOP_MID(), 0, -10)\n"
"        lvgl.obj_set_style_text_color(slider_label, lvgl.color_white(), lvgl.PART_MAIN())\n"
"        print('Slider created successfully')\n"
"    else\n"
"        print('ERROR: Slider label creation failed')\n"
"    end\n"
"else\n"
"    print('ERROR: Slider creation failed')\n"
"end\n"
"\n"
"-- Create info panel with PSRAM information\n"
"print('Creating PSRAM info panel...')\n"
"local info_panel = lvgl.obj_create(scr)\n"
"if info_panel then\n"
"    lvgl.obj_set_size(info_panel, 420, 80)\n"
"    lvgl.obj_align(info_panel, lvgl.ALIGN_BOTTOM_MID(), 0, -10)\n"
"    lvgl.obj_set_style_bg_color(info_panel, 0x1B5E20, lvgl.PART_MAIN())\n"
"    lvgl.obj_set_style_border_width(info_panel, 2, lvgl.PART_MAIN())\n"
"    lvgl.obj_set_style_border_color(info_panel, 0x4CAF50, lvgl.PART_MAIN())\n"
"    \n"
"    local info_text = lvgl.label_create(info_panel)\n"
"    if info_text then\n"
"        lvgl.label_set_text(info_text, 'Status: Lua + PSRAM Active\\nFramework: LVGL + Lua\\nMemory: PSRAM + Internal RAM')\n"
"        lvgl.obj_set_style_text_color(info_text, lvgl.color_white(), lvgl.PART_MAIN())\n"
"        lvgl.obj_center(info_text)\n"
"        print('PSRAM info panel created successfully')\n"
"    else\n"
"        print('ERROR: Info panel text creation failed')\n"
"    end\n"
"else\n"
"    print('ERROR: Info panel creation failed')\n"
"end\n"
"\n"
"-- Create additional widgets to test memory usage\n"
"print('Creating additional widgets...')\n"
"local switch = lvgl.switch_create(scr)\n"
"if switch then\n"
"    lvgl.obj_align(switch, lvgl.ALIGN_CENTER(), -100, 80)\n"
"    \n"
"    local switch_label = lvgl.label_create(scr)\n"
"    if switch_label then\n"
"        lvgl.label_set_text(switch_label, 'PSRAM')\n"
"        lvgl.obj_align_to(switch_label, switch, lvgl.ALIGN_OUT_LEFT_MID(), -10, 0)\n"
"        lvgl.obj_set_style_text_color(switch_label, lvgl.color_white(), lvgl.PART_MAIN())\n"
"        print('Switch created successfully')\n"
"    end\n"
"end\n"
"\n"
"local bar = lvgl.bar_create(scr)\n"
"if bar then\n"
"    lvgl.obj_set_size(bar, 100, 20)\n"
"    lvgl.obj_align(bar, lvgl.ALIGN_CENTER(), 100, 80)\n"
"    lvgl.bar_set_value(bar, 85, lvgl.ANIM_OFF())\n"
"    \n"
"    local bar_label = lvgl.label_create(scr)\n"
"    if bar_label then\n"
"        lvgl.label_set_text(bar_label, '85%')\n"
"        lvgl.obj_align_to(bar_label, bar, lvgl.ALIGN_OUT_RIGHT_MID(), 10, 0)\n"
"        lvgl.obj_set_style_text_color(bar_label, lvgl.color_white(), lvgl.PART_MAIN())\n"
"        print('Progress bar created successfully')\n"
"    end\n"
"end\n"
"\n"
"print('All Lua UI elements created successfully')\n"
"\n"
"-- Final refresh\n"
"lvgl.obj_invalidate(scr)\n"
"lvgl.refr_now()\n"
"print('Final refresh completed')\n"
"\n"
"print('Lua LVGL demo with PSRAM support completed!')\n"
"\n"
"-- Define functions for dynamic updates\n"
"function update_ui()\n"
"    print('UI update called from Lua - PSRAM active')\n"
"    if slider then\n"
"        local current_val = math.random(50, 100)\n"
"        lvgl.slider_set_value(slider, current_val, lvgl.ANIM_OFF())\n"
"        if slider_label then\n"
"            lvgl.label_set_text(slider_label, 'Memory Usage: ' .. current_val .. '%')\n"
"        end\n"
"        lvgl.obj_invalidate(scr)\n"
"        lvgl.refr_now()\n"
"    end\n"
"end\n"
"\n"
"function cleanup_ui()\n"
"    print('Cleaning up Lua UI with PSRAM...')\n"
"    lvgl.obj_clean(scr)\n"
"    test_data = nil\n"
"    collectgarbage('collect')\n"
"    print('Lua UI and PSRAM data cleaned up')\n"
"end\n"
"\n"
"-- Test garbage collection\n"
"print('Running garbage collection...')\n"
"collectgarbage('collect')\n"
"print('Garbage collection completed')\n";

#endif // MAIN_LUA_H
